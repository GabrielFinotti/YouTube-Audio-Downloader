name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.x"

jobs:
  # ===============================
  # Quality Checks
  # ===============================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🎨 Check Prettier formatting
        run: npm run format -- --check

      - name: 🔧 TypeScript type check
        run: npm run type-check

      - name: 📝 Validate commit messages
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  # ===============================
  # Tests
  # ===============================
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality

    strategy:
      matrix:
        node-version: ["18.x", "20.x"]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test
        env:
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: 📊 Generate coverage report
        if: matrix.node-version == '18.x'
        run: |
          echo "📈 Test coverage report generated locally"
          echo "Coverage files available in ./coverage/ directory"

  # ===============================
  # Build
  # ===============================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # ===============================
  # Security
  # ===============================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 🔒 Run security audit
        run: npm audit --audit-level=high

      - name: 🛡️ Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ===============================
  # Release (only on main branch)
  # ===============================
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Create Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 23
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===============================
  # Notify
  # ===============================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()

    steps:
      - name: 📧 Notify on success
        if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "All checks passed: Quality ✅ Tests ✅ Build ✅ Security ✅"

      - name: 🚨 Notify on failure
        if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed!"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1
